class Solution {
    void gen(int target,int index,int[] nums,List<Integer> stack,List<List<Integer>> ans){
        if(index>=nums.length) return ;
        if(target==0){
            ans.add(new ArrayList(stack));
            return ;
        }
        else if(nums[index]<=target){
            stack.add(nums[index]);
            gen(target-nums[index],index,nums,stack,ans);
            stack.remove(stack.size()-1);
        }
        gen(target,index+1,nums,stack,ans);
    }
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> ans = new ArrayList<>();
        gen(target,0,candidates,new ArrayList(),ans);
        return ans;
    }
}
/*
Input: candidates = [2,3,6,7], target = 7
Output: [[2,2,3],[7]]
Explanation:
2 and 3 are candidates, and 2 + 2 + 3 = 7. Note that 2 can be used multiple times.
7 is a candidate, and 7 = 7.
These are the only two combinations.*/
/*Input: candidates = [2,3,5], target = 8
Output: [[2,2,2,2],[2,3,3],[3,5]]*/
